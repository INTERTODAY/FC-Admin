<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<dict>
		<key>connection</key>
		<dict>
			<key>colorIndex</key>
			<integer>2</integer>
			<key>database</key>
			<string>orangemanu</string>
			<key>host</key>
			<string>orangemanu.cchtmymwefrc.ap-northeast-2.rds.amazonaws.com</string>
			<key>kcid</key>
			<string>-3456586335526593411</string>
			<key>name</key>
			<string>orangenamu</string>
			<key>rdbms_type</key>
			<string>mysql</string>
			<key>sslCACertFileLocation</key>
			<string></string>
			<key>sslCACertFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslCertificateFileLocation</key>
			<string></string>
			<key>sslCertificateFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslKeyFileLocation</key>
			<string></string>
			<key>sslKeyFileLocationEnabled</key>
			<integer>0</integer>
			<key>type</key>
			<string>SPTCPIPConnection</string>
			<key>useSSL</key>
			<integer>0</integer>
			<key>user</key>
			<string>orangemanu</string>
		</dict>
		<key>session</key>
		<dict>
			<key>connectionEncoding</key>
			<string>utf8mb4</string>
			<key>contentFilter</key>
			<dict/>
			<key>contentPageNumber</key>
			<integer>1</integer>
			<key>contentSelection</key>
			<data>
			YnBsaXN0MDDUAQIDBAUGNjdYJHZlcnNpb25YJG9iamVjdHNZJGFy
			Y2hpdmVyVCR0b3ASAAGGoK0HCBUWFxgZHSQoLDA0VSRudWxs0wkK
			CwwQFFdOUy5rZXlzWk5TLm9iamVjdHNWJGNsYXNzow0OD4ACgAOA
			BKMREhOABYAGgAiADFR0eXBlVHJvd3NUa2V5c18QJlNlbGVjdGlv
			bkRldGFpbFR5cGVQcmltYXJ5S2V5ZWREZXRhaWxz0wkKCxobHKCg
			gAfSHh8gIVokY2xhc3NuYW1lWCRjbGFzc2VzXxATTlNNdXRhYmxl
			RGljdGlvbmFyeaMgIiNcTlNEaWN0aW9uYXJ5WE5TT2JqZWN00goL
			JSehJoAJgAvSCykqK1lOUy5zdHJpbmeAClJpZNIeHy0uXxAPTlNN
			dXRhYmxlU3RyaW5noy0vI1hOU1N0cmluZ9IeHzEyXk5TTXV0YWJs
			ZUFycmF5ozEzI1dOU0FycmF50h4fIjWiIiNfEA9OU0tleWVkQXJj
			aGl2ZXLRODlUZGF0YYABAAgAEQAaACMALQAyADcARQBLAFIAWgBl
			AGwAcAByAHQAdgB6AHwAfgCAAIIAhwCMAJEAugDBAMIAwwDFAMoA
			1QDeAPQA+AEFAQ4BEwEVARcBGQEeASgBKgEtATIBRAFIAVEBVgFl
			AWkBcQF2AXkBiwGOAZMAAAAAAAACAQAAAAAAAAA6AAAAAAAAAAAA
			AAAAAAABlQ==
			</data>
			<key>contentSortColIsAsc</key>
			<true/>
			<key>contentViewport</key>
			<string>{{0, 0}, {1296, 843}}</string>
			<key>isToolbarVisible</key>
			<true/>
			<key>queries</key>
			<string>select a.name, a.email, a.password, a.role, f.name as fc_name, f.id as fc_id
from `admin` as a
left join `fc` as f
on f.id = a.fc_id
where a.email='j.lee@intertoday.com';


create table `log_edu_user_progress` (
	`id` bigint not null auto_increment,
	`user_id` bigint not null,
	`course_list_id` bigint not null,
	`created_dt` datetime default CURRENT_TIMESTAMP,
	primary key (`id`)
) ENGINE=InnoDB CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=COMPACT; 

alter table `log_edu_user_progress` 
add foreign key (`user_id`)
references `users`(`id`);

alter table `log_edu_user_progress` 
add foreign key (`course_list_id`)
references `course_list`(`id`);


select * from `users`;

insert into `users` (`name`, `password`, `email`, `phone`, `fc_id`, `duty_id`, `branch_id`) 
values();

select b.id, b.name from `branch` as b
where b.fc_id='1' and b.active=true;



select d.id, d.name from `duty` as d
where d.fc_id='1' and d.active=true;

select * from `branch`;
insert into `branch` (`name`, `fc_id`) values();


select u.id as id, u.name as name, u.phone as phone, u.email as email, b.name as branch, d.name as duty
from `users` as u
left join `fc` as f
on f.id = u.fc_id
left join `branch` as b
on b.id = u.branch_id
left join `duty` as d
on d.id = u.duty_id
where u.fc_id='1' and u.active=true
order by u.id desc;

select * from `users`;
update `users` set password='qwer123456' 
where `id`='1' and name='이재준';


select * from `admin`;
update `admin` set password='qwer123456' 
where `id`='1' and name='이재준';


update `users` 
set name='', email='', phone='', branch_id='', duty_id=''
where id='';



# 강의 리스트 가져오기
select c.id as course_id, c.name, t.name as teacher, c.created_dt, a.name as creator, c.desc
from `course` as c
left join `teacher` as t
on c.teacher_id = t.id
left join `admin` as a
on a.id = c.creator_id
where a.fc_id='1'
order by c.created_dt desc;



select course_id, round(avg(rate),1) as rate
from `user_rating`
where course_id='1'
group by `course_id`;

select *
from `user_rating`
where course_id='3';


select * from `course_list` as cl
where cl.course_id='1'
order by `order` desc, `id` asc;

alter table `course_list` drop column `title`;

alter table `course_list`
add column `title` varchar(255) character set utf8 default null after `type`;


select * from `quiz_group`;



select * from `course_list` as cl
where cl.course_id='1'
order by `order` desc, `id` asc;


select t.name, t.desc 
from `course` as c
left join `teacher` as t
on c.teacher_id = t.id
where c.id='1';

select * from `teacher`;

alter table `teacher`
add column `creator_id` bigint not null after `desc`;

alter table `teacher`
add foreign key (`creator_id`)
references `admin`(`id`);


select t.id, t.name, t.desc 
from `teacher` as t
left join `admin` as a
on a.id = t.creator_id
where a.fc_id='1';


insert into `teacher` (`name`, `desc`, `creator_id`) 
values();



select * from `course`;

insert into `course` (`name`, `teacher_id`, `desc`, `creator_id`)
values (?,?,?,?);

# 나중에 보안을 위한 개발을 진행할 수 있도록 한다.
select * from `video`
where id='1';


select * from `quiz_group`
where group_id='de9b9ed78d7e2e1dceeffee780e2f919'
order by `order` desc, id asc;


#quiz id만 추출하여 퀴즈의 순서에 맞게 퀴즈를 보여줄 수 있도록 한다. 10,3
select quiz_id from `quiz_group`
where group_id='de9b9ed78d7e2e1dceeffee780e2f919'
order by `order` desc, id asc;

# 그룹아이디를 통한 질문 가져오기
select 
q.* 
from `quiz` as q
where `id` in (
	select quiz_id from `quiz_group`
	where group_id='de9b9ed78d7e2e1dceeffee780e2f919'
	order by `order` desc, id asc
);

# group_id로 문제에 대한 선택지 가져오기
select `option` from `quiz_option`
where opt_id='09dd14cbace219fc37491dede5e3bf40'
order by `order` desc, id asc;

select * from `quiz_option`;

# 하나의 퀴즈에 대한 질문과 질문에 대한 선택지를 가져온다. 이 리스트를 통해서 바인딩을 시도해보자.
select 
q.id, q.type, q.question, q.answer, q.answer_desc, qo.option, qo.order, qo.id as option_id
from `quiz` as q
left join `quiz_option` as qo
on qo.opt_id = q.option_id
where q.id in (
	select quiz_id from `quiz_group`
	where group_id='de9b9ed78d7e2e1dceeffee780e2f919'
	order by `order` desc, id asc
)
order by `order` desc, qo.`id`;


# 2017.01.04 필요가 없어서 지워버림
alter table `quiz` drop column `name`;

# type은 VIMEO or YOUTUBE 밖에 입력이 될 수 없게 처리한다.!
select * from `video`;
insert into `video` (`name`, `type`, `url`, `creator_id`) 
values(?,?,?,?);

# todo type에 VIDEO, QUIZ, FINAL만 들어갈 수 있도록 수정한다.
select * from `course_list`;
insert into `course_list` (`course_id`, `type`, `title`, `video_id`)
values (?,?,?,?);

select e.`name`, e.`created_dt`, e.`start_dt`, e.`end_dt`, a.`name` as creator, e.course_group_id
from `edu` as e
left join `admin` as a
on e.creator_id = a.id
where e.active=true and a.fc_id='1'
order by e.`created_dt` desc, e.`id` desc;


# 강의 아이디를 가져온다.
select * from `course_group`
where group_id='qwer1234'
order by `order` desc, `id` asc;

# 가져온 강의 아이디를 가지고 강의 테이블에서 해당 강의 정보를 조회하여 가져온다.

# 나중에 각 강의의 상세 정보와 별점까지도 가져올 수 있도록 한다.
select 
c.id, c.name as name, c.desc, t.name as teacher
from `course` as c
left join `teacher` as t
on c.teacher_id = t.id
where c.id in (
select course_id from `course_group`
where group_id='qwer1234'
order by `order` desc, `id` asc
)
and c.`active`=true;


# 접속한 admin의 fc에 등록된 강의만 추려서 가져온다.
select c.id, c.name, t.name as teacher
from `course` as c
left join `admin` as a
on a.id = c.creator_id
left join `teacher` as t
on t.id = c.teacher_id
where a.fc_id='1';

select * from `edu`;

insert into `edu` (`name`,`desc`,`course_group_id`,`creator_id`)
values(?,?,?,?);

select * from `course_group`;
insert into `course_group` (`group_id`, `course_id`)
values(?,?);

select * from edu where id='6';

insert into `edu` (`name`,`desc`,`course_group_id`,`creator_id`)
values('test','desc','qwer1234qwer',1);
</string>
			<key>table</key>
			<string>edu</string>
			<key>view</key>
			<string>SP_VIEW_CUSTOMQUERY</string>
			<key>windowVerticalDividerPosition</key>
			<real>202</real>
		</dict>
	</dict>
	<key>encrypted</key>
	<false/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string>insert into `edu` (`name`,`desc`,`course_group_id`,`creator_id`)
values('test','desc','qwer1234qwer',1)</string>
		<string>select * from edu where id='6'</string>
		<string>select * from edu</string>
		<string>select * from `course_group`</string>
		<string>select * from `edu`</string>
		<string># 접속한 admin의 fc에 등록된 강의만 추려서 가져온다.
select c.id, c.name, t.name as teacher
from `course` as c
left join `admin` as a
on a.id = c.creator_id
left join `teacher` as t
on t.id = c.teacher_id
where a.fc_id='1'</string>
		<string># 접속한 admin의 fc에 등록된 강의만 추려서 가져온다.
select c.name, t.name as teacher
from `course` as c
left join `admin` as a
on a.id = c.creator_id
left join `teacher` as t
on t.id = c.teacher_id
where a.fc_id='1'</string>
		<string># 접속한 admin의 fc에 등록된 강의만 추려서 가져온다.
select *
from `course` as c
left join `admin` as a
on a.id = c.creator_id
left join `teacher` as t
on t.id = c.teacher_id
where a.fc_id='1'</string>
		<string># 접속한 admin의 fc에 등록된 강의만 추려서 가져온다.
select * from `course` as c
left join `admin` as a
on a.id = c.creator_id
where a.fc_id='1'</string>
		<string># 접속한 admin의 fc에 등록된 강의만 추려서 가져온다.
select * from `course` as c
left join `admin` as a
on a.id = c.creator_id</string>
		<string># 접속한 admin의 fc에 등록된 강의만 추려서 가져온다.
select * from `course` as c
left join `admin` as a
a.id = c.creator_id</string>
		<string># 접속한 admin의 fc에 등록된 강의만 추려서 가져온다.
select * from `course` as c
left join `admin` as a</string>
		<string># 접속한 admin의 fc에 등록된 강의만 추려서 가져온다.
select * from `course` as c
left join `admin` as a
c.creator_id = c.id</string>
		<string># 접속한 admin의 fc에 등록된 강의만 추려서 가져온다.
select * from `course`</string>
		<string>select e.`name`, e.`created_dt`, e.`start_dt`, e.`end_dt`, a.`name` as creator, e.course_group_id
from `edu` as e
left join `admin` as a
on e.creator_id = a.id
where e.active=true and a.fc_id='1'
order by e.`created_dt` desc, e.`id` desc</string>
		<string>select e.`active`, e.`created_dt`, e.`start_dt`, e.`end_dt`, a.`name` as creator, e.course_group_id
from `edu` as e
left join `admin` as a
on e.creator_id = a.id
where e.active=true and a.fc_id='1'
order by e.`created_dt` desc, e.`id` desc</string>
		<string>select e.`active`, e.`created_dt`, e.`start_dt`, e.`end_dt`, a.`name` as creator, e.course_group_id, a.fc_id 
from `edu` as e
left join `admin` as a
on e.creator_id = a.id
where e.active=true and a.fc_id='1'
order by e.`created_dt` desc, e.`id` desc</string>
		<string>select e.`active`, e.`created_dt`, e.`start_dt`, e.`end_dt`, a.`name` as creator, e.course_group_id, a.fc_id 
from `edu` as e
left join `admin` as a
on e.creator_id = a.id
where e.active=true
order by e.`created_dt` desc, e.`id` desc</string>
		<string>select e.`active`, e.`created_dt`, e.`start_dt`, e.`end_dt`, a.`name` as creator, e.course_group_id 
from `edu` as e
left join `admin` as a
on e.creator_id = a.id
where e.active=true
order by e.`created_dt` desc, e.`id` desc</string>
		<string># 가져온 강의 아이디를 가지고 강의 테이블에서 해당 강의 정보를 조회하여 가져온다.

# 나중에 각 강의의 상세 정보와 별점까지도 가져올 수 있도록 한다.
select 
c.id, c.name as name, c.desc, t.name as teacher
from `course` as c
left join `teacher` as t
on c.teacher_id = t.id
where c.id in (
select course_id from `course_group`
where group_id='qwer1234'
order by `order` desc, `id` asc
)
and c.`active`=true</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>5.6.27-log</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
