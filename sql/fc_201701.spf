<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<dict>
		<key>connection</key>
		<dict>
			<key>colorIndex</key>
			<integer>2</integer>
			<key>database</key>
			<string>orangemanu</string>
			<key>host</key>
			<string>orangemanu.cchtmymwefrc.ap-northeast-2.rds.amazonaws.com</string>
			<key>kcid</key>
			<string>-3456586335526593411</string>
			<key>name</key>
			<string>orangenamu</string>
			<key>rdbms_type</key>
			<string>mysql</string>
			<key>sslCACertFileLocation</key>
			<string></string>
			<key>sslCACertFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslCertificateFileLocation</key>
			<string></string>
			<key>sslCertificateFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslKeyFileLocation</key>
			<string></string>
			<key>sslKeyFileLocationEnabled</key>
			<integer>0</integer>
			<key>type</key>
			<string>SPTCPIPConnection</string>
			<key>useSSL</key>
			<integer>0</integer>
			<key>user</key>
			<string>orangemanu</string>
		</dict>
		<key>session</key>
		<dict>
			<key>connectionEncoding</key>
			<string>utf8mb4</string>
			<key>contentFilter</key>
			<dict/>
			<key>contentPageNumber</key>
			<integer>1</integer>
			<key>contentSelection</key>
			<data>
			YnBsaXN0MDDUAQIDBAUGOjtYJHZlcnNpb25YJG9iamVjdHNZJGFy
			Y2hpdmVyVCR0b3ASAAGGoK8QDwcIFRYXGBkfICEoLDA0OFUkbnVs
			bNMJCgsMEBRXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6MNDg+A
			AoADgASjERITgAWABoAKgA5UdHlwZVRyb3dzVGtleXNfECZTZWxl
			Y3Rpb25EZXRhaWxUeXBlUHJpbWFyeUtleWVkRGV0YWlsc9MJCgsa
			HB6hG4AHoR2ACIAJUjIzCdIiIyQlWiRjbGFzc25hbWVYJGNsYXNz
			ZXNfEBNOU011dGFibGVEaWN0aW9uYXJ5oyQmJ1xOU0RpY3Rpb25h
			cnlYTlNPYmplY3TSCgspK6EqgAuADdILLS4vWU5TLnN0cmluZ4AM
			Umlk0iIjMTJfEA9OU011dGFibGVTdHJpbmejMTMnWE5TU3RyaW5n
			0iIjNTZeTlNNdXRhYmxlQXJyYXmjNTcnV05TQXJyYXnSIiMmOaIm
			J18QD05TS2V5ZWRBcmNoaXZlctE8PVRkYXRhgAEACAARABoAIwAt
			ADIANwBJAE8AVgBeAGkAcAB0AHYAeAB6AH4AgACCAIQAhgCLAJAA
			lQC+AMUAxwDJAMsAzQDPANIA0wDYAOMA7AECAQYBEwEcASEBIwEl
			AScBLAE2ATgBOwFAAVIBVgFfAWQBcwF3AX8BhAGHAZkBnAGhAAAA
			AAAAAgEAAAAAAAAAPgAAAAAAAAAAAAAAAAAAAaM=
			</data>
			<key>contentSortColIsAsc</key>
			<true/>
			<key>contentViewport</key>
			<string>{{0, 0}, {1563, 1051}}</string>
			<key>isToolbarVisible</key>
			<true/>
			<key>queries</key>
			<string>select a.name, a.email, a.password, a.role, f.name as fc_name, f.id as fc_id
from `admin` as a
left join `fc` as f
on f.id = a.fc_id
where a.email='j.lee@intertoday.com';


create table `log_edu_user_progress` (
	`id` bigint not null auto_increment,
	`user_id` bigint not null,
	`course_list_id` bigint not null,
	`created_dt` datetime default CURRENT_TIMESTAMP,
	primary key (`id`)
) ENGINE=InnoDB CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=COMPACT; 

alter table `log_edu_user_progress` 
add foreign key (`user_id`)
references `users`(`id`);

alter table `log_edu_user_progress` 
add foreign key (`course_list_id`)
references `course_list`(`id`);


select * from `users`;

insert into `users` (`name`, `password`, `email`, `phone`, `fc_id`, `duty_id`, `branch_id`) 
values();

select b.id, b.name from `branch` as b
where b.fc_id='1' and b.active=true;



select d.id, d.name from `duty` as d
where d.fc_id='1' and d.active=true;

select * from `branch`;
insert into `branch` (`name`, `fc_id`) values();


select u.id as id, u.name as name, u.phone as phone, u.email as email, b.name as branch, d.name as duty
from `users` as u
left join `fc` as f
on f.id = u.fc_id
left join `branch` as b
on b.id = u.branch_id
left join `duty` as d
on d.id = u.duty_id
where u.fc_id='1' and u.active=true
order by u.id desc;

select * from `users`;
update `users` set password='qwer123456' 
where `id`='1' and name='이재준';


select * from `admin`;
update `admin` set password='qwer123456' 
where `id`='1' and name='이재준';


update `users` 
set name='', email='', phone='', branch_id='', duty_id=''
where id='';



# 강의 리스트 가져오기
select c.id as course_id, c.name, t.name as teacher, c.created_dt, a.name as creator, c.desc
from `course` as c
left join `teacher` as t
on c.teacher_id = t.id
left join `admin` as a
on a.id = c.creator_id
where a.fc_id='1'
order by c.created_dt desc;



select course_id, round(avg(rate),1) as rate
from `user_rating`
where course_id='1'
group by `course_id`;

select *
from `user_rating`
where course_id='3';


select * from `course_list` as cl
where cl.course_id='1'
order by `order` desc, `id` asc;

alter table `course_list` drop column `title`;

alter table `course_list`
add column `title` varchar(255) character set utf8 default null after `type`;


select * from `quiz_group`;



select * from `course_list` as cl
where cl.course_id='1'
order by `order` desc, `id` asc;


select t.name, t.desc 
from `course` as c
left join `teacher` as t
on c.teacher_id = t.id
where c.id='1';

select * from `teacher`;

alter table `teacher`
add column `creator_id` bigint not null after `desc`;

alter table `teacher`
add foreign key (`creator_id`)
references `admin`(`id`);


select t.id, t.name, t.desc 
from `teacher` as t
left join `admin` as a
on a.id = t.creator_id
where a.fc_id='1';


insert into `teacher` (`name`, `desc`, `creator_id`) 
values();



select * from `course`;

insert into `course` (`name`, `teacher_id`, `desc`, `creator_id`)
values (?,?,?,?);

# 나중에 보안을 위한 개발을 진행할 수 있도록 한다.
select * from `video`
where id='1';


select * from `quiz_group`
where group_id='de9b9ed78d7e2e1dceeffee780e2f919'
order by `order` desc, id asc;


#quiz id만 추출하여 퀴즈의 순서에 맞게 퀴즈를 보여줄 수 있도록 한다. 10,3
select quiz_id from `quiz_group`
where group_id='de9b9ed78d7e2e1dceeffee780e2f919'
order by `order` desc, id asc;

# 그룹아이디를 통한 질문 가져오기
select 
q.* 
from `quiz` as q
where `id` in (
	select quiz_id from `quiz_group`
	where group_id='de9b9ed78d7e2e1dceeffee780e2f919'
	order by `order` desc, id asc
);

# group_id로 문제에 대한 선택지 가져오기
select `option` from `quiz_option`
where opt_id='09dd14cbace219fc37491dede5e3bf40'
order by `order` desc, id asc;

select * from `quiz_option`;

# 하나의 퀴즈에 대한 질문과 질문에 대한 선택지를 가져온다. 이 리스트를 통해서 바인딩을 시도해보자.
select 
q.id, q.type, q.question, q.answer, q.answer_desc, qo.option, qo.order, qo.id as option_id
from `quiz` as q
left join `quiz_option` as qo
on qo.opt_id = q.option_id
where q.id in (
	select quiz_id from `quiz_group`
	where group_id='de9b9ed78d7e2e1dceeffee780e2f919'
	order by `order` desc, id asc
)
order by `order` desc, qo.`id`;


# 2017.01.04 필요가 없어서 지워버림
alter table `quiz` drop column `name`;

# type은 VIMEO or YOUTUBE 밖에 입력이 될 수 없게 처리한다.!
select * from `video`;
insert into `video` (`name`, `type`, `url`, `creator_id`) 
values(?,?,?,?);

# todo type에 VIDEO, QUIZ, FINAL만 들어갈 수 있도록 수정한다.
select * from `course_list`;
insert into `course_list` (`course_id`, `type`, `title`, `video_id`)
values (?,?,?,?);

select e.`name`, e.`created_dt`, e.`start_dt`, e.`end_dt`, a.`name` as creator, e.course_group_id
from `edu` as e
left join `admin` as a
on e.creator_id = a.id
where e.active=true and a.fc_id='1'
order by e.`created_dt` desc, e.`id` desc;


# 강의 아이디를 가져온다.
select * from `course_group`
where group_id='qwer1234'
order by `order` desc, `id` asc;

# 가져온 강의 아이디를 가지고 강의 테이블에서 해당 강의 정보를 조회하여 가져온다.

# 나중에 각 강의의 상세 정보와 별점까지도 가져올 수 있도록 한다.
select 
c.id, c.name as name, c.desc, t.name as teacher
from `course` as c
left join `teacher` as t
on c.teacher_id = t.id
where c.id in (
select course_id from `course_group`
where group_id='qwer1234'
order by `order` desc, `id` asc
)
and c.`active`=true;


# 접속한 admin의 fc에 등록된 강의만 추려서 가져온다.
select c.id, c.name, t.name as teacher
from `course` as c
left join `admin` as a
on a.id = c.creator_id
left join `teacher` as t
on t.id = c.teacher_id
where a.fc_id='1';

select * from `edu`;

insert into `edu` (`name`,`desc`,`course_group_id`,`creator_id`)
values(?,?,?,?);

select * from `course_group`;
insert into `course_group` (`group_id`, `course_id`)
values(?,?);

select * from edu where id='6';

insert into `edu` (`name`,`desc`,`course_group_id`,`creator_id`)
values('test','desc','qwer1234qwer',1);


# 임의의 교육 대상자 그룹핑을 모아놓을 수 있는 테이블이 필요하다.


# 관리자가 교육을 위해 특정 유저를 그룹핑하고 그 그룹에게 교육을 부여할 경우
drop table `log_bind_users`;
create table `log_bind_users`(
	`id` bigint not null auto_increment,
	`title` varchar(255) character set utf8 not null,
	`desc` text character set utf8 default null,
	`creator_id` bigint not null,
	`group_id` varchar(255) character set utf8 not null,
	primary key (`id`)
) ENGINE=InnoDB CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=COMPACT; 

alter table `log_bind_users`
add foreign key (`creator_id`)
references `admin`(`id`);

create table `log_group_user`(
	`id` bigint not null auto_increment,
	`group_id` varchar(255) character set utf8 not null,
	`user_id` bigint not null,
	primary key(`id`)
) ENGINE=InnoDB CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=COMPACT; 

alter table `log_group_user`
add foreign key (`user_id`)
references `users`(`id`);

select * from `users`
where `phone` in ('1033650511');


insert into `log_group_user` (`user_id`, `group_id`)
values(?,?);


select * from `log_bind_users`;

insert into `log_bind_users` (`title`,`desc`,`creator_id`, `group_id`)
values(?,?,?,?);


select 
lbu.id, lbu.title, lbu.desc, a.name as creator, lbu.created_dt
from `log_bind_users` as lbu
left join `admin` as a
on a.id = lbu.creator_id
where a.fc_id='1'
order by lbu.`created_dt` desc, lbu.`id` desc;



alter table `log_bind_users`
add column `created_dt` timestamp default CURRENT_TIMESTAMP after `group_id`;

alter table `log_bind_users`
add column `active` boolean default true;

# id와 group_id를 통해서 등록된 유저 테이블 가져오기
# log_bind_user 테이블의 id를 통해서 관리자가 업로드한 유저 목록을 볼 수 있도록 한다..
select lbu.title, lbu.desc, lbu.group_id, lbu.created_dt, a.name as creator 
from `log_bind_users` as lbu
left join `admin` as a
on a.id = lbu.creator_id
where lbu.`id`='1';


select * from `log_group_user`
where `group_id`='77428a8b4040a6a39531ae84b5cd50f8'
order by `id` asc;


# user_id만 추출
select user_id from `log_group_user`
where `group_id`='77428a8b4040a6a39531ae84b5cd50f8'
order by `id` asc;


select 
u.name, u.email, u.phone, b.name as branch, d.name as duty
from `users` as u
left join `branch` as b
on b.id = u.branch_id
left join `duty` as d
on d.id = u.duty_id
where u.`id` in 
(
select user_id from `log_group_user`
where `group_id`='77428a8b4040a6a39531ae84b5cd50f8'
order by `id` asc
);

insert into `training_edu` (`edu_id`, `assigner`) 
values(?,?);



insert into `training_users` (`user_id`, `training_edu_id`)
values(?,?);

# 배정 대상자를 어떻게 가져오지.....
select te.id, e.name, te.created_dt, e.start_dt, e.end_dt, a.name as admin 
from `training_edu` as te
left join `edu` as e
on e.id = te.edu_id
left join `admin` as a
on a.id = te.assigner
where a.fc_id='1'
order by te.created_dt desc;


create table `log_assign_edu`(
	`id` bigint not null auto_increment,
	`training_edu_id` bigint not null,
	`target_users_id` bigint not null,
	primary key(`id`)
) ENGINE=InnoDB CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=COMPACT; ;


alter table `log_assign_edu`
add foreign key (`training_edu_id`)
references `training_edu`(`id`);


alter table `log_assign_edu`
add foreign key (`target_users_id`)
references `log_bind_users`(`id`);


#관리자 페이지
## 관리자는 정의를 내릴 수 있어야 한다.
# supervisor, superadmin, admin, root(모든 계정을 생성할 수 있으며 별도의 인하우스툴을 관리할 수 있다./내부계정)
# superadmin만이 계정을 생성할 수 있다. (s/v, admin ) 입력값의 범위를 설정할 수 있어야 한다.

select * from `admin`
where fc_id='1'
order by `id` desc;

insert into `admin` (`name`, `email`, `password`, `role`, `fc_id`)
values(?,?,?,?,?);


# admin의 email은 unique key로 설정할 것.



# 진척도 관리 리스트뷰


select te.id, e.name, te.created_dt, e.start_dt, e.end_dt, lbu.title as target
from `training_edu` as te
left join `edu` as e
on e.id = te.edu_id
left join `admin` as a
on a.id = te.assigner
left join `log_assign_edu` as lae
on lae.training_edu_id = te.id
left join `log_bind_users` as lbu
on lbu.id = lae.target_users_id
where a.fc_id='1'
order by te.created_dt desc;



# log_course_progress를 삭제할 것.

# 유저별 강의 내 완료된 세션 개수를 확인할 수 있다.
select count(*) as session_completed from `log_session_progress`
where `course_id`='3' and user_id='2' and end_dt is not null;

# 강의별 세션 개수를 가져와보자.
select * from `course_list`;
select count(*) as total_session from `course_list`
where course_id='7';


# edu_id를 통해서 강의 id 추출
select c.`id`, c.`name` as name
from `course` as c
where c.id in (
	select course_id from `course_group`	
	where group_id=(select course_group_id from `edu` where id='22')
	order by `order` desc, `id` asc
) and c.`active`=true;


# 강의 순서와 관계없이 이와 같이 가져와서 비교하여 서버에서 연산을 할 수 있도록 한다..
select course_id, count(*) as sess_total from `course_list`
where `course_id` in ('7','8')
group by `course_id`;

/* select course_id, count(*) as session_total from `course_list`
where `course_id` in ('8','7')
group by `course_id`; */

/* select * from `course_list`
where `course_id` in ('7','8'); */


# edu아이디를 통해서 강의별 총 세션수를 가져온다.
select course_id, count(*) as sess_total from `course_list`
where `course_id` in (
select c.`id`
from `course` as c
where c.id in (
	select course_id from `course_group`	
	where group_id=(select course_group_id from `edu` where id='22')
	order by `order` desc, `id` asc
) and c.`active`=true
)
group by `course_id`;


# 이제 유저별로 강의 완료된 세션수를 강의별로 가져온다.

# 그리고 강의별 이수율을 가져온다.

# 강의별 이수율을 통해서 총 교육에 대한 해당 유저의 이수율을 계산한다.

# 점포별 이수율을 계산할 수 있도록 유저리스트에서 branch_id를 함께 가져온다.

/* select * from `course`;
select * from `course_list`;


select *
from `course` as c
where c.id in (
	select course_id from `course_group`	
	where group_id=(select course_group_id from `edu` where id='22')
	order by `order` desc, `id` asc
) and c.`active`=true; */


/* select tu.user_id, e.course_group_id 
from `training_users` as tu
left join `trainig_edu` as e
on tu.training_edu_id = e.id; */

alter table `training_users`
add foreign key(`training_edu_id`)
references training_edu(`id`);


/* insert into `training_users` (`user_id`, `training_edu_id`)
values('1','13'); */
# training_edu 테이블의 열을 지우지 못하는 버그가 있다. 
/* select * from `training_edu`
where `edu_id`='23'; */

;
# 일단 진행중인 교육에 참가중인 유저를 추출
select * from `training_users`
where `training_edu_id`='15';


# 추출한 유저 아이디와 테이블 아이디를 통해서 log_session_progress 테이블을 조회할 수 있다.
select user_id, count(*) as total from `log_session_progress`
where `user_id`='2' and training_user_id='2' and end_dt is not null
group by `user_id`;

# 다시
# 유저들을 나열한 후에 course_id에 따라서 이수율을 알 수 있어야 한다.


select count(*) as session_completed from `log_session_progress`
where `course_id`='7' and training_user_id='26' and user_id='1' and end_dt is not null;

select * from `log_session_progress`
where `course_id`='7' and training_user_id='26' and user_id='1' and end_dt is not null;

select * from `log_session_progress`
where `course_id`='7' and training_user_id='26' and user_id='1' and end_dt is not null;

select * from `log_session_progress`
where `course_id`='7' and training_user_id='26' and user_id='1';


select count(*) as session_completed from `log_session_progress`
where `course_id`='7' and training_user_id='26' and user_id='1' and end_dt is not null;

# 위와 같은 방식이라면 진척도를 점검할 때마다 굉장한 디비 부하가 걸릴 것이다.
# 유저 리스트를 모두 들고 와서 진행도를 파악할 수 있는 방법을 찾아야 한다.

# 일단 유저를 꺼내서 별도로 가지고 있는다.
select * from `training_users`
where training_edu_id='15';


# edu아이디를 통해서 강의별 총 세션수를 가져온다.
select course_id, count(*) as sess_total from `course_list`
where `course_id` in (
select c.`id`
from `course` as c
where c.id in (
	select course_id from `course_group`	
	where group_id=(select course_group_id from `edu` where id='23')
	order by `order` desc, `id` asc
) and c.`active`=true
)
group by `course_id`;

# 리스트에 있는 유저별로 모든 강의의 모든 세션수를 들고와서 총 세션 수 대비 비율을 계산한다.
select * from `log_session_progress`
where user_id in ('1', '2') and course_id in ('7', '8');

select * from `log_session_progress`
where user_id in ('1', '2') and course_id in ('7', '8')
order by `user_id` asc;

#log_session_progress에서 training_edu_id를 하나씩 바인딩이 되어야 하는 이유가 뭔가??
# training_user_id가 없으면 특정 교육에 대한 유저를 분리할 수 없다. 대신 training_edu_id값을 가지고 있다면 더 낫지 않을까?? --&gt; 석제에게 질문할 것
select user_id, count(*) as completed_sess from `log_session_progress`
where user_id in ('1', '2') and course_id in ('7', '8') and training_user_id in ('25', '26')
group by `user_id`;


## 이제는 현재 교육을 받는 인원 모든 사람을 끌어와서 left join으로 현재까지 완료한 총 세션 개수를 붙여서 출력을 해보자.

select 
tu.user_id, if(sess.completed_sess is null, 0, sess.completed_sess) as completed_sess, u.name, d.name as duty, b.name as branch
from `training_users` as tu
left join (
select user_id, count(*) as completed_sess from `log_session_progress`
where user_id in ('1', '2') and course_id in ('7', '8') and training_user_id in ('25', '26')
group by `user_id`
) as sess
on tu.user_id = sess.user_id
left join `users` as u
on tu.user_id = u.id
left join `branch` as b
on u.branch_id = b.id
left join `duty` as d
on d.id = u.duty_id
where tu.training_edu_id='15'
order by `completed_sess` desc;


select 
tu.user_id, if(sess.completed_sess is null, 0, sess.completed_sess) as completed_sess, u.name, d.name as duty, b.name as branch
from `training_users` as tu
left join (
select user_id, count(*) as completed_sess from `log_session_progress`
where course_id in ('7', '8')
group by `user_id`
) as sess
on tu.user_id = sess.user_id
left join `users` as u
on tu.user_id = u.id
left join `branch` as b
on u.branch_id = b.id
left join `duty` as d
on d.id = u.duty_id
where tu.training_edu_id='15'
order by `completed_sess` desc;




# trainig_edu_id를 통해서 가져올 수 없나??
select course_id, count(*) as sess_total from `course_list`
where `course_id` in (
select c.`id`
from `course` as c
where c.id in (
	select course_id from `course_group`	
	where group_id=(select course_group_id from `edu` where id='23')
	order by `order` desc, `id` asc
) and c.`active`=true
)
group by `course_id`;



</string>
			<key>table</key>
			<string>edu</string>
			<key>view</key>
			<string>SP_VIEW_CUSTOMQUERY</string>
			<key>windowVerticalDividerPosition</key>
			<real>184</real>
		</dict>
	</dict>
	<key>encrypted</key>
	<false/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string># trainig_edu_id를 통해서 가져올 수 없나??
select course_id, count(*) as sess_total from `course_list`
where `course_id` in (
select c.`id`
from `course` as c
where c.id in (
	select course_id from `course_group`	
	where group_id=(select course_group_id from `edu` where id='23')
	order by `order` desc, `id` asc
) and c.`active`=true
)
group by `course_id`</string>
		<string># edu아이디를 통해서 강의별 총 세션수를 가져온다.
select course_id, count(*) as sess_total from `course_list`
where `course_id` in (
select c.`id`
from `course` as c
where c.id in (
	select course_id from `course_group`	
	where group_id=(select course_group_id from `edu` where id='23')
	order by `order` desc, `id` asc
) and c.`active`=true
)
group by `course_id`</string>
		<string># edu아이디를 통해서 강의별 총 세션수를 가져온다.
select course_id, count(*) as sess_total from `course_list`
where `course_id` in (
select c.`id`
from `course` as c
where c.id in (
	select course_id from `course_group`	
	where group_id=(select course_group_id from `edu` where id='21')
	order by `order` desc, `id` asc
) and c.`active`=true
)
group by `course_id`</string>
		<string># edu아이디를 통해서 강의별 총 세션수를 가져온다.
select course_id, count(*) as sess_total from `course_list`
where `course_id` in (
select c.`id`
from `course` as c
where c.id in (
	select course_id from `course_group`	
	where group_id=(select course_group_id from `edu` where id='22')
	order by `order` desc, `id` asc
) and c.`active`=true
)
group by `course_id`</string>
		<string>select 
tu.user_id, if(sess.completed_sess is null, 0, sess.completed_sess) as completed_sess, u.name, d.name as duty, b.name as branch
from `training_users` as tu
left join (
select user_id, count(*) as completed_sess from `log_session_progress`
where course_id in ('7', '8')
group by `user_id`
) as sess
on tu.user_id = sess.user_id
left join `users` as u
on tu.user_id = u.id
left join `branch` as b
on u.branch_id = b.id
left join `duty` as d
on d.id = u.duty_id
where tu.training_edu_id='15'
order by `completed_sess` desc</string>
		<string>select 
tu.user_id, if(sess.completed_sess is null, 0, sess.completed_sess) as completed_sess, u.name, d.name as duty, b.name as branch
from `training_users` as tu
left join (
select user_id, count(*) as completed_sess from `log_session_progress`
where user_id in ('1', '2') and course_id in ('7', '8')
group by `user_id`
) as sess
on tu.user_id = sess.user_id
left join `users` as u
on tu.user_id = u.id
left join `branch` as b
on u.branch_id = b.id
left join `duty` as d
on d.id = u.duty_id
where tu.training_edu_id='15'
order by `completed_sess` desc</string>
		<string>user_id in ('1', '2') and</string>
		<string>select 
tu.user_id, if(sess.completed_sess is null, 0, sess.completed_sess) as completed_sess, u.name, d.name as duty, b.name as branch
from `training_users` as tu
left join (
select user_id, count(*) as completed_sess from `log_session_progress`
where  course_id in ('7', '8')
group by `user_id`
) as sess
on tu.user_id = sess.user_id
left join `users` as u
on tu.user_id = u.id
left join `branch` as b
on u.branch_id = b.id
left join `duty` as d
on d.id = u.duty_id
where tu.training_edu_id='15'
order by `completed_sess` desc</string>
		<string>## 이제는 현재 교육을 받는 인원 모든 사람을 끌어와서 left join으로 현재까지 완료한 총 세션 개수를 붙여서 출력을 해보자.

select 
tu.user_id, if(sess.completed_sess is null, 0, sess.completed_sess) as completed_sess, u.name, d.name as duty, b.name as branch
from `training_users` as tu
left join (
select user_id, count(*) as completed_sess from `log_session_progress`
where user_id in ('1', '2') and course_id in ('7', '8') and training_user_id in ('25', '26')
group by `user_id`
) as sess
on tu.user_id = sess.user_id
left join `users` as u
on tu.user_id = u.id
left join `branch` as b
on u.branch_id = b.id
left join `duty` as d
on d.id = u.duty_id
where tu.training_edu_id='15'
order by `completed_sess` desc</string>
		<string>and training_user_id in ('25', '26')</string>
		<string>## 이제는 현재 교육을 받는 인원 모든 사람을 끌어와서 left join으로 현재까지 완료한 총 세션 개수를 붙여서 출력을 해보자.

select 
tu.user_id, if(sess.completed_sess is null, 0, sess.completed_sess) as completed_sess, u.name, d.name as duty, b.name as branch
from `training_users` as tu
left join (
select user_id, count(*) as completed_sess from `log_session_progress`
where user_id in ('1', '2') and course_id in ('7', '8') 
group by `user_id`
) as sess
on tu.user_id = sess.user_id
left join `users` as u
on tu.user_id = u.id
left join `branch` as b
on u.branch_id = b.id
left join `duty` as d
on d.id = u.duty_id
where tu.training_edu_id='15'
order by `completed_sess` desc</string>
		<string>## 이제는 현재 교육을 받는 인원 모든 사람을 끌어와서 left join으로 현재까지 완료한 총 세션 개수를 붙여서 출력을 해보자.

select 
tu.user_id, if(sess.completed_sess is null, 0, sess.completed_sess) as completed_sess, u.name, d.name as duty, b.name as branch
from `training_users` as tu
left join (
select user_id, count(*) as completed_sess from `log_session_progress`
where user_id in ('1', '2') and course_id in ('7', '8') and training_user_id in ('25', '26')
group by `user_id`
) as sess
on tu.user_id = sess.user_id
left join `users` as u
on tu.user_id = u.id
left join `branch` as b
on u.branch_id = b.id
left join `duty` as d
on d.id = u.duty_id
where tu.training_edu_id='15'</string>
		<string>## 이제는 현재 교육을 받는 인원 모든 사람을 끌어와서 left join으로 현재까지 완료한 총 세션 개수를 붙여서 출력을 해보자.

select 
tu.user_id, if(sess.completed_sess is null, 0, sess.completed_sess) as completed_sess, u.name, d.name as duty, b.name as branh
from `training_users` as tu
left join (
select user_id, count(*) as completed_sess from `log_session_progress`
where user_id in ('1', '2') and course_id in ('7', '8') and training_user_id in ('25', '26')
group by `user_id`
) as sess
on tu.user_id = sess.user_id
left join `users` as u
on tu.user_id = u.id
left join `branch` as b
on u.branch_id = b.id
left join `duty` as d
on d.id = u.duty_id
where tu.training_edu_id='15'</string>
		<string>## 이제는 현재 교육을 받는 인원 모든 사람을 끌어와서 left join으로 현재까지 완료한 총 세션 개수를 붙여서 출력을 해보자.

select 
tu.user_id, if(sess.completed_sess is null, 0, sess.completed_sess) as completed_sess, u.name, d.name as duty, b.name
from `training_users` as tu
left join (
select user_id, count(*) as completed_sess from `log_session_progress`
where user_id in ('1', '2') and course_id in ('7', '8') and training_user_id in ('25', '26')
group by `user_id`
) as sess
on tu.user_id = sess.user_id
left join `users` as u
on tu.user_id = u.id
left join `branch` as b
on u.branch_id = b.id
left join `duty` as d
on d.id = u.duty_id
where tu.training_edu_id='15'</string>
		<string>## 이제는 현재 교육을 받는 인원 모든 사람을 끌어와서 left join으로 현재까지 완료한 총 세션 개수를 붙여서 출력을 해보자.

select 
tu.user_id, if(sess.completed_sess is null, 0, sess.completed_sess) as completed_sess, u.name, d.name as duty
from `training_users` as tu
left join (
select user_id, count(*) as completed_sess from `log_session_progress`
where user_id in ('1', '2') and course_id in ('7', '8') and training_user_id in ('25', '26')
group by `user_id`
) as sess
on tu.user_id = sess.user_id
left join `users` as u
on tu.user_id = u.id
left join `branch` as b
on u.branch_id = b.id
left join `duty` as d
on d.id = u.duty_id
where tu.training_edu_id='15'</string>
		<string>## 이제는 현재 교육을 받는 인원 모든 사람을 끌어와서 left join으로 현재까지 완료한 총 세션 개수를 붙여서 출력을 해보자.

select 
tu.user_id, if(sess.completed_sess is null, 0, sess.completed_sess) as completed_sess, u.name, d.name
from `training_users` as tu
left join (
select user_id, count(*) as completed_sess from `log_session_progress`
where user_id in ('1', '2') and course_id in ('7', '8') and training_user_id in ('25', '26')
group by `user_id`
) as sess
on tu.user_id = sess.user_id
left join `users` as u
on tu.user_id = u.id
left join `branch` as b
on u.branch_id = b.id
left join `duty` as d
on d.id = u.duty_id
where tu.training_edu_id='15'</string>
		<string>## 이제는 현재 교육을 받는 인원 모든 사람을 끌어와서 left join으로 현재까지 완료한 총 세션 개수를 붙여서 출력을 해보자.

select 
tu.user_id, if(sess.completed_sess is null, 0, sess.completed_sess) as completed_sess, u.name
from `training_users` as tu
left join (
select user_id, count(*) as completed_sess from `log_session_progress`
where user_id in ('1', '2') and course_id in ('7', '8') and training_user_id in ('25', '26')
group by `user_id`
) as sess
on tu.user_id = sess.user_id
left join `users` as u
on tu.user_id = u.id
left join `branch` as b
on u.branch_id = b.id
left join `duty` as d
on d.id = u.duty_id
where tu.training_edu_id='15'</string>
		<string>## 이제는 현재 교육을 받는 인원 모든 사람을 끌어와서 left join으로 현재까지 완료한 총 세션 개수를 붙여서 출력을 해보자.

select 
tu.user_id, if(sess.completed_sess is null, 0, sess.completed_sess) as completed_sess
from `training_users` as tu
left join (
select user_id, count(*) as completed_sess from `log_session_progress`
where user_id in ('1', '2') and course_id in ('7', '8') and training_user_id in ('25', '26')
group by `user_id`
) as sess
on tu.user_id = sess.user_id
left join `users` as u
on tu.user_id = u.id
left join `branch` as b
on u.branch_id = b.id
left join `duty` as d
on d.id = u.duty_id
where tu.training_edu_id='15'</string>
		<string>## 이제는 현재 교육을 받는 인원 모든 사람을 끌어와서 left join으로 현재까지 완료한 총 세션 개수를 붙여서 출력을 해보자.

select 
tu.user_id, if(sess.completed_sess is null, 0, sess.completed_sess) as completed_sess
from `training_users` as tu
left join (
select user_id, count(*) as completed_sess from `log_session_progress`
where user_id in ('1', '2') and course_id in ('7', '8') and training_user_id in ('25', '26')
group by `user_id`
) as sess
on tu.user_id = sess.user_id
left join `users` as u
on tu.user_id = u.id
left join `branch` as b
on u.branch_id = b.id
where tu.training_edu_id='15'</string>
		<string>## 이제는 현재 교육을 받는 인원 모든 사람을 끌어와서 left join으로 현재까지 완료한 총 세션 개수를 붙여서 출력을 해보자.

select 
tu.user_id, if(sess.completed_sess is null, 0, sess.completed_sess) as completed_sess
from `training_users` as tu
left join (
select user_id, count(*) as completed_sess from `log_session_progress`
where user_id in ('1', '2') and course_id in ('7', '8') and training_user_id in ('25', '26')
group by `user_id`
) as sess
on tu.user_id = sess.user_id
left join `users` as u
on tu.user_id = u.id
where tu.training_edu_id='15'</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>5.6.27-log</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
